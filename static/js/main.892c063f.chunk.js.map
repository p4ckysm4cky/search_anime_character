{"version":3,"sources":["components/AnimeCharacter.js","App.js","index.js"],"names":["AnimeCharacter","props","useState","expanded","setExpanded","Card","style","width","CardMedia","height","maxWidth","margin","image","character","large","CardContent","Typography","variant","color","name","full","gender","age","CardActions","display","IconButton","marginLeft","onClick","Collapse","in","timeout","unmountOnExit","paragraph","description","App","classes","makeStyles","input","marginBottom","submit","useStyles","charName","setCharName","charNameDelay","setCharNameDelay","errorCharName","setErrorCharName","charQuery","gql","DisplayCharName","useQuery","loading","error","data","component","flexWrap","justifyContent","Page","characters","map","id","Container","align","gutterBottom","noValidate","autoComplete","onSubmit","event","preventDefault","TextField","onChange","e","target","value","label","fullWidth","className","Button","type","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.892c063f.chunk.js","sourcesContent":["import React from \"react\"\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Card from '@material-ui/core/Card'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Collapse from '@material-ui/core/Collapse'\r\nimport { useState } from \"react\"\r\n\r\nfunction AnimeCharacter(props) {\r\n\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  // console.log(props.character)\r\n  // console.log(props.character.name.full)\r\n  // console.log(props.character.age)\r\n  // console.log(props.character.image.large)\r\n  // console.log(props.character.description)\r\n\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded)\r\n  }\r\n\r\n  return (\r\n    <Card\r\n    style={{width:240}}\r\n    >\r\n      <CardMedia\r\n        style={{height: 345, maxWidth: 240, margin:\"auto\"}}\r\n        image={props.character.image.large}\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"h5\" color=\"textPrimary\">\r\n          {props.character.name.full}\r\n        </Typography>\r\n\r\n        <Typography variant=\"subtitle1\">\r\n          {props.character.gender}\r\n        </Typography>\r\n\r\n        <Typography variant=\"subtitle2\">\r\n          {props.character.age?`Age: ${props.character.age}`:\"\"}\r\n        </Typography>\r\n      </CardContent>\r\n\r\n      <CardActions\r\n        style={{display:\"flex\"}}\r\n      >\r\n        <IconButton\r\n          style={{marginLeft:\"auto\"}}\r\n          onClick={handleExpandClick}\r\n        >\r\n          <ExpandMoreIcon/>\r\n        </IconButton>\r\n      </CardActions>\r\n\r\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n        <CardContent>\r\n          <Typography paragraph color=\"textSecondary\">\r\n            {props.character.description}\r\n          </Typography>\r\n        </CardContent>\r\n      </Collapse>\r\n\r\n\r\n\r\n    </Card>\r\n  )\r\n}\r\n\r\n\r\nexport default AnimeCharacter","import React from \"react\"\nimport AnimeCharacter from \"./components/AnimeCharacter\"\nimport Typography from \"@material-ui/core/Typography\" // for text\nimport Container from \"@material-ui/core/Container\" // Margins in page\nimport Button from \"@material-ui/core/Button\"\nimport TextField from \"@material-ui/core/TextField\" // User input boxes\nimport { makeStyles } from \"@material-ui/core\" // Allows change of css in materialui\nimport { useState } from \"react\"\nimport {useQuery, gql} from \"@apollo/client\"\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport { findByLabelText } from \"@testing-library/react\"\n\n\n\n\nfunction App() {\n  const useStyles = makeStyles({\n    input: {\n      marginBottom: 20\n    },\n    submit: {\n      marginBottom: 10\n    }\n  })\n  const classes = useStyles()\n\n  const [charName, setCharName] = useState(\"\")\n  const [charNameDelay, setCharNameDelay] = useState(\"\") // This exists because I don't want my queries \n                                                         // fired everytime charName is changed\n  const [errorCharName, setErrorCharName] = useState(false)\n  const charQuery = gql`\n    query {\n      Page(page:0, perPage: 10) {\n        characters(search: \"${charNameDelay}\") {\n          name {\n            full\n          }\n          gender\n          age\n          image {\n            large\n            medium\n          }\n          description\n          \n        }\n      }\n    }\n  `\n\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    setErrorCharName(false)\n    if (charName === \"\") {\n      setErrorCharName(true)\n    } else {\n      // This statement tells it to query anilist\n      // console.log(charName)\n      setCharNameDelay(charName)\n    }\n  }\n  function DisplayCharName() {\n    const {loading, error, data} = useQuery(charQuery)\n    if (loading) return (\n      <Typography variant=\"h5\" component=\"p\" color=\"primary\">\n        Loading...\n      </Typography>)\n    if (error) return <p>An Error has occurred</p>\n    return (\n      <div\n        style={{display:\"flex\", flexWrap:\"wrap\", justifyContent:\"center\"}}\n      \n      >\n        {/* <form>\n          <h1>Anime Characters</h1>\n          <input type=\"text\"></input>\n  \n        </form> */}\n        {data.Page.characters.map((character, id) => {\n          return (\n            <AnimeCharacter\n              key={id}\n              character={character}\n            />\n        )})}\n  \n      </div>\n    );\n  }\n\n\n\n\n  return(\n    <Container>\n      <Typography\n        variant=\"h2\"\n        component=\"h1\"\n        align=\"center\"\n        color=\"primary\"\n        gutterBottom=\"true\"\n      >\n        Search Anime Character\n      </Typography>\n\n      <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <TextField \n          onChange={(e) => setCharName(e.target.value)}\n          variant=\"outlined\"\n          label=\"Anime Character\"\n          fullWidth\n          value={charName}\n          className={classes.input}\n          error={errorCharName}\n        />\n\n        <Button\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.submit}\n        >\n          Submit <ArrowRightIcon/>\n        </Button>\n      </form>\n      {charNameDelay?<DisplayCharName/>:<span></span>}\n    </Container>\n    \n  )\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\"\nimport {\n  ApolloClient,\n  ApolloProvider,\n  HttpLink,\n  InMemoryCache\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: \"https://graphql.anilist.co\"\n  })\n})\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n  </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}